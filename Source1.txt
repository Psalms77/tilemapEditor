//variables
float gridSizef;
unsigned gridSizeu;
float viewSpeed;
sf::Vector2i mousePosScreen;
sf::Vector2i mousePosWindow;
sf::Vector2f mousePosView;
sf::Vector2u mousePosGrid;
float dt;
sf::Clock dtClock;
sf::Text gridCoord;
sf::Font font;
// sprite & texture containers
//std::vector<sf::Sprite> sprites;
std::vector<sf::Texture> textures;
sf::Texture defaultTexture;
sf::Sprite defaultSprite;
std::string tempStr;

// tile selector
sf::RectangleShape* tileSelector;
sf::Texture currentTexture;
sf::Sprite currentSprite;


//tilemap
std::vector<std::vector <sf::RectangleShape>> tileMap;
sf::View view;

//init window
sf::RenderWindow window(sf::VideoMode(1600, 900), "2d Tilemap Editor");
view.setSize(1600.f, 900.f);
view.setCenter(window.getSize().x / 2.f, window.getSize().y / 2.f);

// init basic
gridSizef = 32.f;
gridSizeu = static_cast<unsigned>(gridSizef);
viewSpeed = 200.f;
dt = 0.f;
// init images
defaultTexture.loadFromFile(".\\img\\tiles5.png");

// init text
font.loadFromFile(".\\font\\Roboto-Black.ttf");
gridCoord.setCharacterSize(24);
gridCoord.setFillColor(sf::Color::White);
gridCoord.setFont(font);
gridCoord.setPosition(100.f, 100.f);
gridCoord.setString("testtest");
// init tile selector
tileSelector = new sf::RectangleShape(sf::Vector2f(gridSizef, gridSizef));
//tileSelector->setFillColor(sf::Color::Transparent);
tileSelector->setOutlineColor(sf::Color::Green);
tileSelector->setOutlineThickness(1.f);
// init tilemap
tileMap.resize(64, std::vector<sf::RectangleShape>());
for (int x = 0; x < 64; x++)
{
	tileMap[x].resize(64, sf::RectangleShape());
	for (int y = 0; y < 64; y++)
	{
		tileMap[x][y].setSize(sf::Vector2f(gridSizef, gridSizef));
		tileMap[x][y].setOutlineThickness(1.f);
		tileMap[x][y].setOutlineColor(sf::Color::Red);
		tileMap[x][y].setFillColor(sf::Color::Transparent);
		tileMap[x][y].setPosition(x * gridSizef, y * gridSizef);
	}
}





while (window.isOpen())
{
	dt = dtClock.restart().asSeconds();
	sf::Event event;
	while (window.pollEvent(event))
	{
		if (event.type == sf::Event::Closed)
			window.close();
	}

	// grid coordination
	std::stringstream ss;
	ss << "Current Grid Coordinate: " << mousePosGrid.x << ", " << mousePosGrid.y << "\n";
	gridCoord.setString(ss.str());

	window.setView(view);

	// move camera
	if (sf::Keyboard::isKeyPressed(sf::Keyboard::A))  //left
	{
		view.move(-viewSpeed * dt, 0.f);
	}
	if (sf::Keyboard::isKeyPressed(sf::Keyboard::D))  //right
	{
		view.move(viewSpeed * dt, 0.f);
	}
	if (sf::Keyboard::isKeyPressed(sf::Keyboard::W))  //up
	{
		view.move(0.f, -viewSpeed * dt);
	}
	if (sf::Keyboard::isKeyPressed(sf::Keyboard::S))  //down
	{
		view.move(0.f, viewSpeed * dt);
	}

	// check mouse
	mousePosScreen = sf::Mouse::getPosition();
	mousePosWindow = sf::Mouse::getPosition(window);  // why though
	mousePosView = window.mapPixelToCoords(mousePosWindow);
	if (mousePosView.x >= 0.f)
	{
		mousePosGrid.x = (mousePosView.x) / gridSizeu;
	}
	if (mousePosView.y >= 0.f)
	{
		mousePosGrid.y = (mousePosView.y) / gridSizeu;
	}
	window.setView(window.getDefaultView());
	// snap tile selector to grid
	tileSelector->setPosition(mousePosGrid.x * gridSizef, mousePosGrid.y * gridSizef);
	tileSelector->setTexture(&defaultTexture);



	// render
	window.clear();
	//tileMap[3][3].setTexture(&defaultTexture);
	window.setView(view);
	// render elements
	//this->window->draw();
	for (int x = 0; x < 64; x++)
	{
		for (int y = 0; y < 64; y++)
		{
			window.draw(tileMap[x][y]);
		}
	}
	//this->window->draw(*shape);
	window.draw(*tileSelector);
	window.setView(window.getDefaultView());

	// render ui
	window.draw(gridCoord);

	window.display();
}
